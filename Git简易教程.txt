
1、创建版本库
     初始化一个Git仓库，使用git init命令。
        添加文件到Git仓库，分两步：
          * 第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；   
          * 第二步，使用命令git commit，完成
2、时光穿梭机
         要随时掌握工作区的状态，使用git status命令。
         如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
3、版本回退
         HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
        穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
        要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
4、工作区和暂存区
     就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区：
     工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
     暂存区可以这么认为，就是使用git add file命令后，但是有没有提交的时候文件所在的位置。
5、管理修改
     如果只是用了git add file，但是并没有提交，也就是没有使用git commit，然后有修改了文件，在使用git commit后，第二次修改就没有被提交。
     第一次修改 -> git add -> 第二次修改 -> git add -> git commit
6、撤销修改
     场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
     场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
     场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
7、删除文件
     1、新建一个文件，添加并且提交
     2、然后使用rm file
     3、使用git rm file就完全删除
     4、使用git checkout -- file就可以恢复
8、远程仓库
	用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
9、添加远程库
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步
10、从远程库克隆
	git clone克隆一个本地库：
	$ git clone git@github.com:michaelliao/gitskills.git
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
11、分支管理
	分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
12、创建和合并分支
	Git鼓励大量使用分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
13、解决分支
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	用git log --graph命令可以看到分支合并图。
14、分支策略
	Git 分支十分强大，在团队开发中应该充分应用。
 	合并分支时，加上 --no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾                           经做过合并。
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
	$ git merge --no-ff -m "merge with no-ff" dev
15、BUG分支
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
16、Feature分支
	开发一个新feature，最好新建一个分支；
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
17、多人协作
	推送分支：
	Git就会把该分支推送到远程库对应的远程分支上：
	$ git push origin master
	如果要推送其他分支，比如dev，就改成：
	$ git push origin dev	
	一台电脑的另一个目录下克隆：
	$ git clone git@github.com:michaelliao/learngit.git
	小结：
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
18、标签管理
	命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	git tag -a <tagname> -m "blablabla..."可以指定标签信息；
	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
	命令git tag可以查看所有标签。
19、操作标签
	命令git push origin <tagname>可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d <tagname>可以删除一个本地标签；
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
20、使用GitHub
	在GitHub上，可以任意Fork开源仓库；
	自己拥有Fork后的仓库的读写权限；
	可以推送pull request给官方仓库来贡献代码。







